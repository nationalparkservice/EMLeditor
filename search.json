[{"path":"https://roblbaker.github.io/EMLeditor/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 EMLeditor authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/articles/EMLeditor.html","id":"dependencies","dir":"Articles","previous_headings":"","what":"Dependencies","title":"EMLeditor","text":"addition EMLeditor, also need EML package complete steps. can download install individually, get everything need NPSdataverse using:","code":"#install the NPSdataverse: install.packages(\"devtools\") devtools::install_github(\"nationalparkservice/NPSdataverse\") library(NPSdataverse) #individual install: install.packages(\"devtools\") devtools::install_github(\"nationalparkservice/EMLeditor\") install.packages(\"EML\") library(EML) library(EMLeditor)"},{"path":"https://roblbaker.github.io/EMLeditor/articles/EMLeditor.html","id":"workflow-outline","dir":"Articles","previous_headings":"","what":"Workflow Outline","title":"EMLeditor","text":"EMLeditor’s primary objective edit view EML formatted files, generate scratch. suggested workflow : Use EMLassemblyline::make_eml() generate initial EML document save .xml file (NPS naming convention : *_metadata.xml) Use EML::read_eml() function load EML file R R object. Use EMLeditor functions edit metadata R evaluate whether metadata acceptable (don’t forget use EML::eml_validate() make sure generating valid EML). Use EML::write_eml() function write R object back XML (remember NPS naming convention metadata files *_metadata.xml). use EMLeditor functions alter metadata (e.g. function prefix “set_” name) also silently add National Park Service publisher (including location, ROR id, etc) metadata unless set NPS=FALSE. leave default setting NPS=TRUE, EMLeditor also assume data package created “NPS” add information metadata. details customizing publisher originating agency content, see section non-NPS users. “set_” functions also inject information version EMLeditor used metadata.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/articles/EMLeditor.html","id":"a-minimal-workflow","dir":"Articles","previous_headings":"","what":"A Minimal Workflow","title":"EMLeditor","text":"workflow assumes EML generated using EMLassemblyline, also work number EML generators (e.g. ezEML). Currently, many steps EMLeditor default interactive give feedback current fields metadata, ask want update , report results edits. like turn option , set force = TRUE see section automated scripting EMLeditor.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/articles/EMLeditor.html","id":"import-your-metadata-into-r","dir":"Articles","previous_headings":"A Minimal Workflow","what":"Import your metadata into R","title":"EMLeditor","text":"","code":"my_metadata <- EML::read_eml(\"mymetadata_metdata.xml\", from=\"xml\")"},{"path":"https://roblbaker.github.io/EMLeditor/articles/EMLeditor.html","id":"add-information-about-cui","dir":"Articles","previous_headings":"A Minimal Workflow","what":"Add information about CUI","title":"EMLeditor","text":"Add information Controlled Unclassified Information (CUI). important indicate type CUI , () CUI, must even data package contain CUI. Choose one five CUI codes. : PUBLIC - contain CUI. FED - Contains CUI. federal employees access (similar “internal ” DataStore). FEDCON - Contains CUI. federal employees federal contractors access (also much like current “internal ” setting DataStore) DL - Contains CUI. available named list individuals (list individuals TBD) NOCON - Contains CUI. Federal, state, local, tribal employees may access, contractors . first code NPS specific. information remaining four codes can found National Archives website.","code":"my_meta2 <- set_cui(my_metadata, \"PUBLIC\")"},{"path":"https://roblbaker.github.io/EMLeditor/articles/EMLeditor.html","id":"set-the-intellectual-rights","dir":"Articles","previous_headings":"A Minimal Workflow","what":"Set the intellectual rights","title":"EMLeditor","text":"EMLassemblyine ezEML provide attractive looking boilerplate setting intellectual rights. looks reasonable easy just keep. However, NPS specific regulations can intellectualRights tag. Use set_int_rights() replace text NPS-approved text. Note: must first add CUI dissemination code using set_cui() dissemination code license must agree. , give data package PUBLIC dissemination code “restricted” license (vise versa: restricted data package contains CUI public domain CC0 license). “restricted”: data contains Controlled Unclassified Information (CUI), intellectual rights must read: “product determined contain Controlled Unclassified Information (CUI) National Park Service, intended internal use . published open license. Unauthorized access, use, distribution prohibited.” “public”: data contain CUI, default public domain. intellectual rights must read: “work public domain. copyright license.” “CC0”: need license, instance working partner organization requires license, use CC0: “person associated work deed dedicated work public domain waiving rights work worldwide copyright law, including related neighboring rights, extent allowed law. can copy, modify, distribute perform work, even commercial purposes, without asking permission.” set_int_rights() function also put name license  field EML DataStore harvesting.","code":"# choose from \"restricted\", \"public\" and \"CC0\", see above: my_meta2 <- set_int_rights(my_meta2, \"public\")"},{"path":"https://roblbaker.github.io/EMLeditor/articles/EMLeditor.html","id":"add-a-data-package-doi","dir":"Articles","previous_headings":"A Minimal Workflow","what":"Add a data package DOI","title":"EMLeditor","text":"Add data package’s Digital Object Identifier (DOI) metadata. set_datastore_doi() function requires logged VPN. initiates draft data package reference DataStore, populates reference title pulled metadata, “[DRAFT] : <data package title>”. temporary title purely tracking purposes can easily updated later. set_datastore_doi() function insert DOI data package metadata. things keep mind: DOI data package reference yet active publicly accessible review activation/publication. sure upload data package correct draft reference! easy create several draft references draft title check reference ID number carefully (working making process easier less error prone).","code":"my_meta2 <- set_datastore_doi(my_meta2)"},{"path":"https://roblbaker.github.io/EMLeditor/articles/EMLeditor.html","id":"add-information-about-the-drr-optional","dir":"Articles","previous_headings":"A Minimal Workflow","what":"Add information about the DRR (optional)","title":"EMLeditor","text":"producing (plan produce) DRR, add links DRR describing data package. Similar added data package DOI, need DOI DRR drafting well DRR’s Title. , go DataStore initiate draft DRR, including title. purposes data package, need populate fields. point, need activate DRR reference , DOI reserved DRR, activated publication plenty time construct DRR.","code":"my_meta2 <- set_drr(my_meta2, 7654321, \"DRR Title\")"},{"path":"https://roblbaker.github.io/EMLeditor/articles/EMLeditor.html","id":"set-the-language","dir":"Articles","previous_headings":"A Minimal Workflow","what":"Set the language","title":"EMLeditor","text":"human language (opposed computer language) data package metadata constructed . Examples include English, Spanish, Navajo, etc. full list available languages available Library Congress. Please use “English Name Language” input. function convert input appropriate 3-character ISO 639-2 code.","code":"my_meta2 <- set_language(my_meta2, \"English\")"},{"path":"https://roblbaker.github.io/EMLeditor/articles/EMLeditor.html","id":"add-content-unit-links","dir":"Articles","previous_headings":"A Minimal Workflow","what":"Add content unit links","title":"EMLeditor","text":"park units data collected , instance ROMO, ROMN. data package includes data one park, can listed. instance, data collected park units within network, unit listed separately rather network. geographic coordinates corresponding bounding boxes park unit listed automatically generated inserted metadata. Individual park units informative bounding box entire network.","code":"park_units <- c(\"ROMO\", \"GRSD\", \"YELL\") my_meta2 <- set_content_units(my_meta2, park_units)"},{"path":"https://roblbaker.github.io/EMLeditor/articles/EMLeditor.html","id":"add-the-producing-units","dir":"Articles","previous_headings":"A Minimal Workflow","what":"Add the producing unit(s)","title":"EMLeditor","text":"unit responsible generating data package. may single park (ROMO) network (ROMN). may identical units listed previous step, overlapping, entirely different. Great! ’re done adding essential NPS-specific metadata EML. two quick steps left:","code":"#a single proucing unit: my_meta2 <- set_producing_units(my_meta2, \"ROMN\")  #for collaborative projects with multiple producing units: my_meta2 <- set_producing_units(my_meta2, c(\"ROMN\", \"GRYN\")"},{"path":"https://roblbaker.github.io/EMLeditor/articles/EMLeditor.html","id":"validate-your-eml","dir":"Articles","previous_headings":"A Minimal Workflow","what":"Validate your EML","title":"EMLeditor","text":"OK, first one might take tick run: eml_validate returns errors, inspect fix . Feel free contribute issue, email Rob Baker questions, concerns, suggestions.","code":"EML::eml_validate(my_meta2)"},{"path":"https://roblbaker.github.io/EMLeditor/articles/EMLeditor.html","id":"write-your-edited-eml-back-to-disk","dir":"Articles","previous_headings":"A Minimal Workflow","what":"Write your edited EML back to disk","title":"EMLeditor","text":"Assuming everything went smoothly eml_validate returns ‘TRUE’, write EML back disk can upload data files DataStore. Keep mind file name end _metadata.xml. Also, uploading data package (data files metadata) DataStore, make sure upload correct draft reference!","code":"EML::write_eml(my_meta2, \"mymetadatafilename_metadata.xml\")"},{"path":"https://roblbaker.github.io/EMLeditor/articles/EMLeditor.html","id":"additional-functions","dir":"Articles","previous_headings":"","what":"Additional Functions","title":"EMLeditor","text":"Minimal Workflow section assumes correctly used EMLassemblyline generate high-quality EML document. event find issues EML wish correct portions , EMLeditor includes functions allow edit common EML errors without re-run EMLassemblyline.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/articles/EMLeditor.html","id":"edit-the-title","dir":"Articles","previous_headings":"Additional Functions","what":"Edit the title","title":"EMLeditor","text":"title changed (instance, perhaps reviewers suggested title realize prefer) find typo title, can update title directly EMLeditor using set_title():","code":"#give my data package a new title:  my_meta2 <- set_title(my_meta2, \"This is my new Title\")  #check the new title: get_title(my_meta2)"},{"path":"https://roblbaker.github.io/EMLeditor/articles/EMLeditor.html","id":"edit-the-abstract","dir":"Articles","previous_headings":"Additional Functions","what":"Edit the abstract","title":"EMLeditor","text":"abstract prominently displayed DataStore landing page forwarded DataCite DOI assignment data.gov (among places) enhance data discoverability reuse, important abstract contain errors. Typographical errors, particularly non-ascii characters common problems abstract EML documents. set_abstract() function includes number routines minimize errors introduced word processors non-UTF8 encoding (pretty sure don’t want “&amp13;” abstract) anticipate potential eventualities. therefore encouraged construct abstract Notepad text editor (word processor Microsoft Word). relatively simple function readily support multiple paragraphs, bullet points, like. Check back handy functions future. ’s something ’d like see added, please let us know posting Issue github. Don’t forget validate updated EML file write back .xml using EMLeditor make edits.","code":"#replace your abstract: my_meta2 <- set_abstract(my_meta2, \"This is my new abstract. I can use this function to replace it as many times as I like until it looks just the way I want it to.\")  #check the new abstract: get_abstract(my_meta2)"},{"path":"https://roblbaker.github.io/EMLeditor/articles/EMLeditor.html","id":"scripting-with-emleditor","dir":"Articles","previous_headings":"","what":"Scripting with EMLeditor","title":"EMLeditor","text":"interactive feedback prompts provided EMLeditor functions can turned enable efficient scripting. “set_” class functions parameter, force defaults force = FALSE. turn feedback prompts, set force = TRUE calling function. careful using functions way may - may - make changes metadata advised change lack change. Inspect final product carefully.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/articles/EMLeditor.html","id":"custom-publisherproducer","dir":"Articles","previous_headings":"","what":"Custom Publisher/Producer","title":"EMLeditor","text":"EMLeditor functions designed primarily use staff National Park Service publication data packages DataStore. Consequently, “set_” class functions silently perform two operations default: set publisher National Park Service (location Fort Collins office) specify agency created data package NPS set field “NPS” TRUE can prevent set_class functions performing operations changing default status parameter NPS = TRUE NPS = FALSE. leave publisher information untouched create additionalMetadata item agency created data package. like set publisher something Fort Collins Office National Park Service like set agency created data package something NPS, use set_publisher() function. sure specify NPS = FALSE function perform default operations (set publisher NPS Fort Collins Office set agency NPS). Warning: set_publisher used , likely rare, circumstances: publisher National Park Service contact address publisher central office Fort Collins (data packages uploaded DataStore published Fort Collins Office NPS) originating agency NPS (.e. contractor partner organization) data package created NPS ’s probably good idea run make sure arguments, especially defaults, properly specified.","code":"args(set_publisher)"},{"path":"https://roblbaker.github.io/EMLeditor/articles/EMLeditor.html","id":"check-your-eml","dir":"Articles","previous_headings":"","what":"Check your EML","title":"EMLeditor","text":"’s always good idea check EML. visually inspecting .xml, file three good approaches : Check whether EML schema-valid: Build mock-readme file: mock readme file approximation readme file automatically generated DataStore upon upload included data package. ’s good, human readable, way check whether many critical elements EML properly formatted. Although actual readme DataStore may differ slightly, mock readme looks good, ’s good indication readme DataStore . hand, something mock readme, ’s good indication may want go back fix relevant portions EML. upload mock readme file DataStore! Run series NPS-specific checks metadata. checks reviewers likely run prior publication. metadata-specific subset functions included DPchecker package.","code":"# Use the eml_validate function from the EML package: EML::eml_validate(my_meta2) # Outputs readme to the screen write_readme(my_meta2)   # Alternatively, save the readme to a text file write_readme(my_meta2, \"readme.txt\") #If you have not already written your metadata back to .xml: EML::write_eml(mymeta2, \"my_metadata.xml\")  #run checks on your metadata. You must tell the check_eml() function where your file is. It will default to the current working directory. There must be only one xml file in the directory.  #If your metadata is in the current working directory: check_eml()  #to change to a new sub-directory: check_eml(directory=here::here(\"my_new_directory\"))  #to change to a directory higher up in the hierarchy: check_eml(directory=here::here(\"..\"))  #to move higher up in the hierarchy, then select a different subdirectory: check_eml(directory=here::here(\"..\", \"a_different_sub_directory\"))"},{"path":"https://roblbaker.github.io/EMLeditor/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Robert Baker. Author, maintainer. Judd Patterson. Author. Issac Quevedo. Contributor. Amy Sherman. Contributor.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Baker R, Patterson J (2023). EMLeditor: View Edit EML Metadata. R package version 0.1.0.4, https://github.com/nationalparkservice/EMLeditor.","code":"@Manual{,   title = {EMLeditor: View and Edit EML Metadata},   author = {Robert Baker and Judd Patterson},   year = {2023},   note = {R package version 0.1.0.4},   url = {https://github.com/nationalparkservice/EMLeditor}, }"},{"path":[]},{"path":[]},{"path":[]},{"path":"https://roblbaker.github.io/EMLeditor/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"View and Edit EML Metadata","text":"goal EMLeditor edit EML-formatted xml files. Specifically, EMLeditor provides many functions useful U.S. National Park Service generating metadata statistical data packages uploaded DataStore. NPS affiliation assumed default. However, functions viewing editing metadata may useful people outside NPS.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/index.html","id":"workflow-outline","dir":"","previous_headings":"","what":"Workflow outline","title":"View and Edit EML Metadata","text":"EMLeditor’s primary objective edit view EML formatted files, generate scratch. suggested workflow : Use EMLassemblyline::make_eml() generate initial EML document save .xml file (NPS naming convention : *_metadata.xml) Use EML::read_eml() function load EML file R R object. Use EMLeditor functions edit metadata R evaluate whether metadata acceptable (don’t forget use EML::eml_validate() make sure generating valid EML). Use EML::write_eml() function write R object back XML (remember NPS naming convention metadata files *_metadata.xml). use EMLeditor functions alter metadata (e.g. “set” class functions) also silently add National Park Service publisher (including location, ROR id, etc) metadata unless set NPS=FALSE. leave default setting NPS=TRUE, EMLeditor also assume data package created “NPS” add information metadata. EMLeditor also add information version EMLeditor used edit metadata (instance used “set” class functions).","code":""},{"path":"https://roblbaker.github.io/EMLeditor/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"View and Edit EML Metadata","text":"can install development version EMLeditor GitHub : install packages NPSdataverse (including EMLeditor):","code":"# install.packages(\"devtools\") devtools::install_github(\"nationalparkservice/EMLeditor\") devtools::install_github(\"nationalparkservice/NPSdataverse\")"},{"path":"https://roblbaker.github.io/EMLeditor/index.html","id":"details","dir":"","previous_headings":"","what":"Details","title":"View and Edit EML Metadata","text":"detailed description use EML editor functions guide functions required complete EML metadata creation construct NPS data package uploading DataStore, see complete guide.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/index.html","id":"example-1","dir":"","previous_headings":"","what":"Example 1:","title":"View and Edit EML Metadata","text":"basic workflow adding Digital Object Identifier:","code":"library(EMLeditor) library(EML)  # load a pre-existing EML-formated xml file: my_eml <- EML::read_eml(\"EML_metadata.xml\", from = \"xml\")  # the 7-digit number is your DataStore Reference number. # It is automatically generated when you initiate a draft Reference. # Your DOI is reserved but will not be registered/activated until publication. my_eml2 <- set_doi(my_eml, \"1234567\")  # make sure your EML is valid. EML::eml_validate(my_eml2)  # write the new R object back to XML: write_eml(my_eml2, \"EML_metadata.xml\")"},{"path":"https://roblbaker.github.io/EMLeditor/index.html","id":"example-2","dir":"","previous_headings":"","what":"Example 2:","title":"View and Edit EML Metadata","text":"upload data package (data files *_metadata.xml) DataStore, DataStore (soon) automatically create readme.txt file accompany data package. can generate mock readme.txt file see whether basic metadata *_metadata.xml file correct. need upload mock file. just tool inspect metadata. actual readme generated DataStore may deviate slightly.","code":"# load a pre-existing EML-formated xml file: my_eml <- EML::read_eml(\"my_EML_metadata.xml\", from = \"xml\")  # Do some stuff with your EML metadata in R. # For instance, add a literature cited section. # bibtex_file is a file with your literature cited in bibtex format, typically with a .bib extension. # Set NPS=FALSE if you do NOT want NPS listed as the publisher. # If NPS is the publisher, this defaults to TRUE and need not be specified. my_eml2 <- set_lit(my_eml, bibtex_file, NPS = FALSE)  # make sure your EML is valid: EML::eml_validate(my_eml2)  # writes a .txt file to your working directory. # (FYI Lit cited doesn't show up in the mock readme) write_readme(my_eml2, \"MockReadMe.txt\")  # Assuming you're happy with the readme file generated, write the object to XML: EML::write_eml(my_eml2, \"my_EML2_metadata.xml\")"},{"path":"https://roblbaker.github.io/EMLeditor/reference/EMLeditor-package.html","id":null,"dir":"Reference","previous_headings":"","what":"EMLeditor: View and Edit EML Metadata — EMLeditor-package","title":"EMLeditor: View and Edit EML Metadata — EMLeditor-package","text":"package use U.S. National Park Service data scientists managers seeking generate EML-formatted metadata datapackages. EML-formatted .xml files typically constructed using EDI's EMLassemblyline package imported R-object using EML package. EMLeditor allows user view contents R object add/edit aspects metadata crucial publication U.S. National Park Service DataStore repository. instance, user can view edit DOI, link DRR, Park Unit connections, information Confidential Unclassified Information (CUI), . EMLeditor allows user write mockup README.txt preview README automatically generated DataStore upon upload look like.","code":""},{"path":[]},{"path":"https://roblbaker.github.io/EMLeditor/reference/EMLeditor-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"EMLeditor: View and Edit EML Metadata — EMLeditor-package","text":"Maintainer: Robert Baker robert_baker@nps.gov (ORCID) Authors: Judd Patterson Judd_Patterson@nps.gov (ORCID) contributors: Issac Quevedo (ORCID) [contributor] Amy Sherman (ORCID) [contributor]","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/check_eml.html","id":null,"dir":"Reference","previous_headings":"","what":"Run checks on EML — check_eml","title":"Run checks on EML — check_eml","text":"Runs series checks EML metadata based functions DPchecker's run_congruence_checks()`.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/check_eml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run checks on EML — check_eml","text":"","code":"check_eml(path = here::here())"},{"path":"https://roblbaker.github.io/EMLeditor/reference/check_eml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run checks on EML — check_eml","text":"path metadata file. Defaults current working directory. Make sure one .xml file directory.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/check_eml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run checks on EML — check_eml","text":"message","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/check_eml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run checks on EML — check_eml","text":"","code":"if (FALSE) { check_eml() }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/dot-get_unit_polygon.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Park Unit Polygon — .get_unit_polygon","title":"Get Park Unit Polygon — .get_unit_polygon","text":".get_unit_polygon gets polygon given park unit.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/dot-get_unit_polygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Park Unit Polygon — .get_unit_polygon","text":"","code":".get_unit_polygon(unit_code)"},{"path":"https://roblbaker.github.io/EMLeditor/reference/dot-get_unit_polygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Park Unit Polygon — .get_unit_polygon","text":"unit_code string (typically 4 characters) park unit code.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/dot-get_unit_polygon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Park Unit Polygon — .get_unit_polygon","text":"park polygon","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/dot-get_unit_polygon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Park Unit Polygon — .get_unit_polygon","text":"retrieves geoJSON string polygon park unit NPS Rest services. Note: official boundary (erm... ok ?!?).","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/dot-get_unit_polygon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Park Unit Polygon — .get_unit_polygon","text":"","code":"if (FALSE) { poly <- .get_unit_polygon(\"BICY\") }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/dot-set_for_by_nps.html","id":null,"dir":"Reference","previous_headings":"","what":"Set ","title":"Set ","text":".set_for_by_nps adds element additionalMetadata NPS set TRUE second element agencyOriginated set \"NPS\" understanding data products created NPS NPS originating agency.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/dot-set_for_by_nps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set ","text":"","code":".set_for_by_nps(eml_object)"},{"path":"https://roblbaker.github.io/EMLeditor/reference/dot-set_for_by_nps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set ","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(, =\"xml\").","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/dot-set_for_by_nps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set ","text":"eml_object","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/dot-set_for_by_nps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set ","text":"","code":"if (FALSE) { .set_for_by_nps(eml_object) }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/dot-set_npspublisher.html","id":null,"dir":"Reference","previous_headings":"","what":"inject NPS Publisher info into metadata — .set_npspublisher","title":"inject NPS Publisher info into metadata — .set_npspublisher","text":".set_npspublisher injects static NPS-specific publisher info eml documents. Calls sub-function set.forOrByNPS, adds additionalMetadata element NPS = TRUE.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/dot-set_npspublisher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"inject NPS Publisher info into metadata — .set_npspublisher","text":"","code":".set_npspublisher(eml_object)"},{"path":"https://roblbaker.github.io/EMLeditor/reference/dot-set_npspublisher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"inject NPS Publisher info into metadata — .set_npspublisher","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(, =\"xml\").","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/dot-set_npspublisher.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"inject NPS Publisher info into metadata — .set_npspublisher","text":"eml_object","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/dot-set_npspublisher.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"inject NPS Publisher info into metadata — .set_npspublisher","text":"checks see publisher element exists, injects NPS-specific info EML publisher, publication location, ROR id - types things NPS data non-data publications require user input. function embedded set. write. class functions (get. functions?).","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/dot-set_npspublisher.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"inject NPS Publisher info into metadata — .set_npspublisher","text":"","code":"if (FALSE) { .set_npspublisher(eml_object) }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/dot-set_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Add/update EMLeditor version — .set_version","title":"Add/update EMLeditor version — .set_version","text":".set_version adds current version EMLeditor EML document.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/dot-set_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add/update EMLeditor version — .set_version","text":"","code":".set_version(eml_object)"},{"path":"https://roblbaker.github.io/EMLeditor/reference/dot-set_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add/update EMLeditor version — .set_version","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(, =\"xml\").","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/dot-set_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add/update EMLeditor version — .set_version","text":"eml_object","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/dot-set_version.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add/update EMLeditor version — .set_version","text":".set_version adds current version EMLeditor metadata, specifically \"additionalMetadata\" element","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/dot-set_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add/update EMLeditor version — .set_version","text":"","code":"if (FALSE) { .set_version(eml_object) }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_abstract.html","id":null,"dir":"Reference","previous_headings":"","what":"returns the abstract — get_abstract","title":"returns the abstract — get_abstract","text":"returns text  tag.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_abstract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returns the abstract — get_abstract","text":"","code":"get_abstract(eml_object)"},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_abstract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"returns the abstract — get_abstract","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(, =\"xml\").","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_abstract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"returns the abstract — get_abstract","text":"text string","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_abstract.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"returns the abstract — get_abstract","text":"get_abstract returns text  tag attempts clean common text issues, enforcing UTF-8 formatting, getting rid carriage returns, new lines,   tags mucks layout, line breaks, etc. see characters like abstract, make sure edit abstract text editor (e.g. Notepad Word). save text new object view using writeLines()","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_abstract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"returns the abstract — get_abstract","text":"","code":"if (FALSE) { abstract <- get_abstract(eml_object) writeLines(abstract) }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_author_list.html","id":null,"dir":"Reference","previous_headings":"","what":"returns the authors — get_author_list","title":"returns the authors — get_author_list","text":"get_author_list() returns text string authors listed  tag.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_author_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returns the authors — get_author_list","text":"","code":"get_author_list(eml_object)"},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_author_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"returns the authors — get_author_list","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(, =\"xml\").","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_author_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"returns the authors — get_author_list","text":"text string","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_author_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"returns the authors — get_author_list","text":"get_author_list() assumes every author least 1 first name (either givenName givenName1) one last name (surName). Middle names (givenName2) optional. author List formatted last name, comma,  first name first author fist name, last name subsequent authors. last author's name preceded ''.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_author_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"returns the authors — get_author_list","text":"","code":"if (FALSE) { get_author_list(eml_object) }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_begin_date.html","id":null,"dir":"Reference","previous_headings":"","what":"returns the first date — get_begin_date","title":"returns the first date — get_begin_date","text":"get_begin_date returns date earliest data point data package","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_begin_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returns the first date — get_begin_date","text":"","code":"get_begin_date(eml_object)"},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_begin_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"returns the first date — get_begin_date","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(, =\"xml\").","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_begin_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"returns the first date — get_begin_date","text":"text string","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_begin_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"returns the first date — get_begin_date","text":"returns date  tag. Although dates formatted according ISO-8601 (YYYY-MM-DD) also check common formats return date text string: \"DD Month YYYY\"","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_begin_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"returns the first date — get_begin_date","text":"","code":"if (FALSE) { get_begin_date(eml_object) }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_citation.html","id":null,"dir":"Reference","previous_headings":"","what":"returns the data package citation — get_citation","title":"returns the data package citation — get_citation","text":"returns Chicago manual style citation data package","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_citation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returns the data package citation — get_citation","text":"","code":"get_citation(eml_object)"},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_citation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"returns the data package citation — get_citation","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(, =\"xml\").","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_citation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"returns the data package citation — get_citation","text":"text string","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_citation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"returns the data package citation — get_citation","text":"get_citation allows user preview citation look like. Harper's Ferry Style Guide recommends using Chicago Manual Style formatting citations. citation formatted according modified version Chicago Manual Style's Author-Date journal article format currently Chicago Manual Style format specified datasets data packages. compliance DataCite's recommendations regarding including DOIs citations, citation displays entire DOI https://www.doi.org/10.58370/xxxxxx\".","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_citation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"returns the data package citation — get_citation","text":"","code":"if (FALSE) { get_citation(eml_object) }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_content_units.html","id":null,"dir":"Reference","previous_headings":"","what":"returns the park unit connections — get_content_units","title":"returns the park unit connections — get_content_units","text":"returns string park unit codes data collected","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_content_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returns the park unit connections — get_content_units","text":"","code":"get_content_units(eml_object)"},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_content_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"returns the park unit connections — get_content_units","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(, =\"xml\").","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_content_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"returns the park unit connections — get_content_units","text":"text string","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_content_units.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"returns the park unit connections — get_content_units","text":"get_content_units() accesses contents  tags returns contents tag contains text \"NPS Unit Connections\". , alerts user suggests adding park unit connections using set_park_units() function.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_content_units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"returns the park unit connections — get_content_units","text":"","code":"if (FALSE) { get_content_units(eml_object) }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_cui.html","id":null,"dir":"Reference","previous_headings":"","what":"returns a CUI statement — get_cui","title":"returns a CUI statement — get_cui","text":"get_cui() returns English-language translation CUI codes","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_cui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returns a CUI statement — get_cui","text":"","code":"get_cui(eml_object)"},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_cui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"returns a CUI statement — get_cui","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(, =\"xml\").","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_cui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"returns a CUI statement — get_cui","text":"text string","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_cui.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"returns a CUI statement — get_cui","text":"get_cui() accesses contents Controlled Unclassified Information (CUI) tag,  returns appropriate string english-language text based properties CUI code. thee  tag empty exist, get_cui alerts user suggests specifying CUI using set_cui() funciton.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_cui.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"returns a CUI statement — get_cui","text":"","code":"if (FALSE) { get_cui(eml_object) }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_doi.html","id":null,"dir":"Reference","previous_headings":"","what":"returns the DOI — get_doi","title":"returns the DOI — get_doi","text":"returns text string DOI data package","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_doi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returns the DOI — get_doi","text":"","code":"get_doi(eml_object)"},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_doi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"returns the DOI — get_doi","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(, =\"xml\").","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_doi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"returns the DOI — get_doi","text":"text string","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_doi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"returns the DOI — get_doi","text":"get_doi() accesses contents tag text manipulation return string DOI including URL prefaced 'doi: '.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_doi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"returns the DOI — get_doi","text":"","code":"if (FALSE) { get_doi(eml_object) }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_drr_doi.html","id":null,"dir":"Reference","previous_headings":"","what":"returns the DOI of the associated DRR — get_drr_doi","title":"returns the DOI of the associated DRR — get_drr_doi","text":"get_drr_doi returns text string associated Data Release Report (DRR)'s DOI.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_drr_doi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returns the DOI of the associated DRR — get_drr_doi","text":"","code":"get_drr_doi(eml_object)"},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_drr_doi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"returns the DOI of the associated DRR — get_drr_doi","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(, =\"xml\").","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_drr_doi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"returns the DOI of the associated DRR — get_drr_doi","text":"text string","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_drr_doi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"returns the DOI of the associated DRR — get_drr_doi","text":"get_drr_doi accesses  tag(s) searches alternateIdentifier tag. element found, contents element returned. title element empty present, user warned pointed set_drr function add DOI associated DRR.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_drr_doi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"returns the DOI of the associated DRR — get_drr_doi","text":"","code":"if (FALSE) { get_drr_doi(eml_object) }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_drr_title.html","id":null,"dir":"Reference","previous_headings":"","what":"returns the title of the associated DRR — get_drr_title","title":"returns the title of the associated DRR — get_drr_title","text":"get_drr_title returns text string associated Data Release Report (DRR)'s Title.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_drr_title.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returns the title of the associated DRR — get_drr_title","text":"","code":"get_drr_title(eml_object)"},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_drr_title.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"returns the title of the associated DRR — get_drr_title","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(, =\"xml\").","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_drr_title.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"returns the title of the associated DRR — get_drr_title","text":"text string","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_drr_title.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"returns the title of the associated DRR — get_drr_title","text":"get_drr_title accesses useageCitation dataset returns title element, found. found, user warned pointed ot set_drr function add title associated DRR.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_drr_title.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"returns the title of the associated DRR — get_drr_title","text":"","code":"if (FALSE) { get_drr_title(eml_object) }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_ds_id.html","id":null,"dir":"Reference","previous_headings":"","what":"returns the DataStore Reference ID — get_ds_id","title":"returns the DataStore Reference ID — get_ds_id","text":"get_ds_id returns DataStore Reference ID string text.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_ds_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returns the DataStore Reference ID — get_ds_id","text":"","code":"get_ds_id(eml_object)"},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_ds_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"returns the DataStore Reference ID — get_ds_id","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(, =\"xml\").","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_ds_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"returns the DataStore Reference ID — get_ds_id","text":"text string","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_ds_id.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"returns the DataStore Reference ID — get_ds_id","text":"accesses DOI listed  tag trims last 7 digits, identical DataStore Reference ID.  tag empty, notifies user DOI associate metadata suggests adding one using set_doi() (edit_doi() also work).","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_ds_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"returns the DataStore Reference ID — get_ds_id","text":"","code":"if (FALSE) { get_ds_id(eml_object) }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_end_date.html","id":null,"dir":"Reference","previous_headings":"","what":"returns the last date — get_end_date","title":"returns the last date — get_end_date","text":"get_end_date returns date last data point data package","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_end_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returns the last date — get_end_date","text":"","code":"get_end_date(eml_object)"},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_end_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"returns the last date — get_end_date","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(, =\"xml\").","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_end_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"returns the last date — get_end_date","text":"text sting","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_end_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"returns the last date — get_end_date","text":"returns date  tag. Although dates formatted according ISO-8601 (YYYY-MM-DD) also check common formats return date text string: \"DD Month YYYY\"","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_end_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"returns the last date — get_end_date","text":"","code":"if (FALSE) { get_end_date(eml_object) }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_file_info.html","id":null,"dir":"Reference","previous_headings":"","what":"displays file names, sizes, and descriptions — get_file_info","title":"displays file names, sizes, and descriptions — get_file_info","text":"get_file_info returns plain-text table containing file names, file sizes, short descriptions files.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_file_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"displays file names, sizes, and descriptions — get_file_info","text":"","code":"get_file_info(eml_object)"},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_file_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"displays file names, sizes, and descriptions — get_file_info","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(, =\"xml\").","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_file_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"displays file names, sizes, and descriptions — get_file_info","text":"text string","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_file_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"displays file names, sizes, and descriptions — get_file_info","text":"get_file_info returns file names (listed  tag), size files (listed  tag) converts bytes (B) easily interpretable unit (KB, MB, GB, etc). Technically uses powers 2^10 KB actually kibibyte (1024 bytes) kilobyte (1000 bytes). Similarly MB mebibyte megabyte, GB gibibyte gigabyte, etc. practical purposes probably irrelevant. Finally, short description provided file ( tag).","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_file_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"displays file names, sizes, and descriptions — get_file_info","text":"","code":"if (FALSE) { get_file_info(eml_object) }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_lit.html","id":null,"dir":"Reference","previous_headings":"","what":"Get literature cited — get_lit","title":"Get literature cited — get_lit","text":"get_lit prints bibtex fromated literature cited screen.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_lit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get literature cited — get_lit","text":"","code":"get_lit(eml_object)"},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_lit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get literature cited — get_lit","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(, =\"xml\").","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_lit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get literature cited — get_lit","text":"character string","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_lit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get literature cited — get_lit","text":"get_lit currently supports bibtex formatted references. get_lit gets items  tag prints screen.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_lit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get literature cited — get_lit","text":"","code":"if (FALSE) { get_lit(eml_object) }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_producing_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the Producing Units — get_producing_units","title":"Returns the Producing Units — get_producing_units","text":"get_producing_units returns whatever metadataProvider eml element. Set producing units using set_producing_units function.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_producing_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the Producing Units — get_producing_units","text":"","code":"get_producing_units(eml_object)"},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_producing_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the Producing Units — get_producing_units","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(, =\"xml\").","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_producing_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the Producing Units — get_producing_units","text":"character sting","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_producing_units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns the Producing Units — get_producing_units","text":"","code":"if (FALSE) { get_producing_units(eml_object) }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_title.html","id":null,"dir":"Reference","previous_headings":"","what":"returns the data package title — get_title","title":"returns the data package title — get_title","text":"get_title returns text string title data package","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_title.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returns the data package title — get_title","text":"","code":"get_title(eml_object)"},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_title.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"returns the data package title — get_title","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(, =\"xml\").","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_title.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"returns the data package title — get_title","text":"text string","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_title.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"returns the data package title — get_title","text":"accesses ","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/get_title.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"returns the data package title — get_title","text":"","code":"if (FALSE) { get_title(eml_object) }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_abstract.html","id":null,"dir":"Reference","previous_headings":"","what":"adds an abstract — set_abstract","title":"adds an abstract — set_abstract","text":"set_abstract adds (replaces) simple abstract.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_abstract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"adds an abstract — set_abstract","text":"","code":"set_abstract(eml_object, abstract, force = FALSE, NPS = TRUE)"},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_abstract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"adds an abstract — set_abstract","text":"eml_object R object imported (typically EML-formatted .xml file) using EML::read_eml(, =\"xml\"). abstract text string abstract. can generate directly R import .txt file. force logical. Defaults false. set FALSE, interactive version function requesting user input feedback. Setting force = TRUE facilitates scripting. NPS Logical. Defaults TRUE. users leave default. specific circumstances set FALSE: publishing NPS, need set publisher location place Fort Collins Office (e.g. working data package) product \"\" NPS \"\" NPS need specify different agency, set NPS = FALSE. NPS=TRUE, function -write existing publisher info inject NPS publisher along Central Office Fort Collins location. Additionally, sets \"NPS\" field TRUE specifies originating agency NPS.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_abstract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"adds an abstract — set_abstract","text":"EML-formatted R object","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_abstract.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"adds an abstract — set_abstract","text":"checks abstract. abstract found, inserts abstract given @param abstract. existing abstract found, user asked whether want replace appropriate action taken. Currently set_abstract allow paragraphs complex formatting. strongly encouraged open abstract text editor notepad make sure stray characters. need multiple paragraphs, need via EMLassemblyline (now).","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_abstract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"adds an abstract — set_abstract","text":"","code":"if (FALSE) { eml_object <- set_abstract(eml_object, \"This is a very short abstract\") }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_content_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Park Unit Connections to metadata — set_content_units","title":"Add Park Unit Connections to metadata — set_content_units","text":"set_content_units() adds specified park units N, E, S, W bounding boxes . information used fill Content Unit Links field DataStore. Invalid park unit codes return error function terminate. know park unit code, see get_park_code() NPSutils package].","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_content_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Park Unit Connections to metadata — set_content_units","text":"","code":"set_content_units(eml_object, park_units, force = FALSE, NPS = TRUE)"},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_content_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Park Unit Connections to metadata — set_content_units","text":"eml_object R object imported (typically EML-formatted .xml file) using EML::read_eml(, =\"xml\"). park_units list comma-separated strings string park unit code. force logical. Defaults false. set FALSE, interactive version function requesting user input feedback. Setting force = TRUE facilitates scripting. NPS Logical. Defaults TRUE. users leave default. specific circumstances set FALSE: publishing NPS, need set publisher location place Fort Collins Office (e.g. working data package) product \"\" NPS \"\" NPS need specify different agency, set NPS = FALSE. NPS=TRUE, function -write existing publisher info inject NPS publisher along Central Office Fort Collins location. Additionally, sets \"NPS\" field TRUE specifies originating agency NPS.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_content_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Park Unit Connections to metadata — set_content_units","text":"EML-formatted R object","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_content_units.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Park Unit Connections to metadata — set_content_units","text":"Adds Content Unit Link(s) geographicCoverage. Content Unit Links(s) (typically) four-letter codes describing park unit(s) data collected (e.g. ROMO, ROMN). park unit given separate geographicCoverage element. content unit link, unit name listed geographicDescription prefaced \"NPS Content Unit Link:\". Required child elements (bounding coordinates) auto populated produce rectangle encompasses park unit question. default force=FALSE option retained, user shown existing content unit links (exist) asked 1) retain 2) add 3) replace . force set TRUE, interactive components skipped existing content unit links replaced.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_content_units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Park Unit Connections to metadata — set_content_units","text":"","code":"if (FALSE) { park_units <- c(\"ROMO\", \"YELL\") set_content_units(eml_object, park_units) }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_cui.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds CUI to metadata — set_cui","title":"Adds CUI to metadata — set_cui","text":"set_cui adds CUI codes EML metadata","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_cui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds CUI to metadata — set_cui","text":"","code":"set_cui(   eml_object,   cui_code = c(\"PUBLIC\", \"NOCON\", \"DL ONLY\", \"FEDCON\", \"FED ONLY\"),   force = FALSE,   NPS = TRUE )"},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_cui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds CUI to metadata — set_cui","text":"eml_object R object imported (typically EML-formatted .xml file) using EML::read_eml(, =\"xml\"). cui_code string consisting one 7 potential CUI codes (defaults \"PUBFUL\"). Pay attention spaces: FED - Contains CUI. federal employees access (similar \"internal \" DataStore) FEDCON - Contains CUI. federal employees federal contractors access (also much like current \"internal \" setting DataStore) DL - Contains CUI. available names list individuals (list individuals TBD) NOCON - Contains  CUI. Federal, state, local, tribal employees may access, contractors . PUBLIC - contain CUI. force logical. Defaults false. set FALSE, interactive version function requesting user input feedback. Setting force = TRUE facilitates scripting. NPS Logical. Defaults TRUE. users leave default. specific circumstances set FALSE: publishing NPS, need set publisher location place Fort Collins Office (e.g. working data package) product \"\" NPS \"\" NPS need specify different agency, set NPS = FALSE. NPS=TRUE, function -write existing publisher info inject NPS publisher along Central Office Fort Collins location. Additionally, sets \"NPS\" field TRUE specifies originating agency NPS.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_cui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds CUI to metadata — set_cui","text":"EML-formatted R object","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_cui.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds CUI to metadata — set_cui","text":"set_cui adds CUI code tag  .","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_cui.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds CUI to metadata — set_cui","text":"","code":"if (FALSE) { set_cui(eml_object, \"PUBFUL\") }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_datastore_doi.html","id":null,"dir":"Reference","previous_headings":"","what":"Initiates a draft reference and inserts the reserved DOI into metadata — set_datastore_doi","title":"Initiates a draft reference and inserts the reserved DOI into metadata — set_datastore_doi","text":"set_datastore_doi() differs set_doi() function generates draft reference DataStore uses draft reference auto-populate DOI within metadata whereas later requires manually initiating draft reference DataStore providing reference ID insert DOI metadata.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_datastore_doi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initiates a draft reference and inserts the reserved DOI into metadata — set_datastore_doi","text":"","code":"set_datastore_doi(eml_object, force = FALSE, NPS = TRUE)"},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_datastore_doi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initiates a draft reference and inserts the reserved DOI into metadata — set_datastore_doi","text":"eml_object R object imported (typically EML-formatted .xml file) using EML::read_eml(, =\"xml\"). force logical. Defaults false. set FALSE, interactive version function requesting user input feedback. Setting force = TRUE facilitates scripting. NPS Logical. Defaults TRUE. users leave default. specific circumstances set FALSE: publishing NPS, need set publisher location place Fort Collins Office (e.g. working data package) product \"\" NPS \"\" NPS need specify different agency, set NPS = FALSE. NPS=TRUE, function -write existing publisher info inject NPS publisher along Central Office Fort Collins location. Additionally, sets \"NPS\" field TRUE specifies originating agency NPS.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_datastore_doi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initiates a draft reference and inserts the reserved DOI into metadata — set_datastore_doi","text":"EML-formatted R object","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_datastore_doi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initiates a draft reference and inserts the reserved DOI into metadata — set_datastore_doi","text":"prevent generating many (unused) draft references, set_datastore_doi() checks metadata contents prior initiating draft reference DataStore. already DOI specified, ask really want -write DOI initiate new draft reference. Setting force = TRUE -ride aspect function, use care. set_datastore_doi() function requires metadata already contain data package title missing prompt insert quit. Setting force = TRUE override check. R successfully initiate draft reference DataStore, function remind log VPN. problem persists, email irma@nps.gov. function generates draft reference DataStore. run force = FALSE (default), function report draft reference URL draft title draft reference. Make sure upload data metadata correct draft reference! draft reference title read: \"DRAFT: \". updated data package title upload metadata. set new DOI set_datastore_doi(), also update links within metadata data files reflect new draft reference DataStore location.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_datastore_doi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initiates a draft reference and inserts the reserved DOI into metadata — set_datastore_doi","text":"","code":"if (FALSE) { eml_object <- set_datastore_doi(eml_object) }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_doi.html","id":null,"dir":"Reference","previous_headings":"","what":"Check & set a DOI — set_doi","title":"Check & set a DOI — set_doi","text":"set_doi() checks see DOI alternateIdentifier tag. EMLassemblyline package stores data package DOIs tag (although official EML schema DOI different location). DOI alternateIdentifier tag, function adds DOI & reports new DOI. DOI, function reports existing DOI, prompts user input either retain existing DOI overwrite . Reports back existing new DOI, depending user input. alternative, consider using set_datastore_doi(), automatically initiate draft reference DataStore inject corresponding DOI metadata.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_doi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check & set a DOI — set_doi","text":"","code":"set_doi(eml_object, ds_ref, force = FALSE, NPS = TRUE)"},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_doi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check & set a DOI — set_doi","text":"eml_object R object imported (typically EML-formatted .xml file) using EML::read_eml(, =\"xml\"). ds_ref 7-digit reference code generated DataStore draft reference initiated.include full URL, DOI prefix, anything except 7-digit DataStore Reference Code. force logical. Defaults false. set FALSE, interactive version function requesting user input feedback. Setting force = TRUE facilitates scripting. NPS Logical. Defaults TRUE. users leave default. specific circumstances set FALSE: publishing NPS, need set publisher location place Fort Collins Office (e.g. working data package) product \"\" NPS \"\" NPS need specify different agency, set NPS = FALSE. NPS=TRUE, function -write existing publisher info inject NPS publisher along Central Office Fort Collins location. Additionally, sets \"NPS\" field TRUE specifies originating agency NPS.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_doi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check & set a DOI — set_doi","text":"EML-formatted R object","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_doi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check & set a DOI — set_doi","text":"set_doi() used change DOI, also update urls listed metadata data file reflect new DOI/DataStore reference.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_doi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check & set a DOI — set_doi","text":"","code":"if (FALSE) { eml_object <- set_doi(eml_object, 1234567) }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_drr.html","id":null,"dir":"Reference","previous_headings":"","what":"adds DRR connection — set_drr","title":"adds DRR connection — set_drr","text":"set_drr adds DOI associated DRR","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_drr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"adds DRR connection — set_drr","text":"","code":"set_drr(   eml_object,   drr_ref_id,   drr_title,   org_name = \"NPS\",   force = FALSE,   NPS = TRUE )"},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_drr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"adds DRR connection — set_drr","text":"eml_object R object imported (typically EML-formatted .xml file) using EML::read_eml(, =\"xml\"). drr_ref_id 7-digit string DataStore Reference ID DRR associated data package. drr_title title DRR appears DataStore Reference. org_name String. Defaults NPS. organization publishing DRR NPS, set org_name publishing organization's name. force logical. Defaults false. set FALSE, interactive version function requesting user input feedback. Setting force = TRUE facilitates scripting. NPS Logical. Defaults TRUE. users leave default. specific circumstances set FALSE: publishing NPS, need set publisher location place Fort Collins Office (e.g. working data package) product \"\" NPS \"\" NPS need specify different agency, set NPS = FALSE. NPS=TRUE, function -write existing publisher info inject NPS publisher along Central Office Fort Collins location. Additionally, sets \"NPS\" field TRUE specifies originating agency NPS.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_drr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"adds DRR connection — set_drr","text":"EML-formatted R object","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_drr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"adds DRR connection — set_drr","text":"adds uses DataStore Reference ID associate DRR  properly formatted DOI (prefaced \"DRR: \")  element. Creates populates required children elements usageCitation including DRR title, creator organization name, report number. Note organization name (org_name) defaults NPS.  want organization name DRR NPS, set org_name=\"Favorite Organization\" set NPS=FALSE. Also sets id flag usageCitation \"associatedDRR\".","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_drr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"adds DRR connection — set_drr","text":"","code":"if (FALSE) { drr_title <- \"Data Release Report for Data Package 1234\" set_drr(eml_object, \"2293234\", drr_title) }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_int_rights.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Intellectual Rights — set_int_rights","title":"Set Intellectual Rights — set_int_rights","text":"set_int_rights allows intellectualRights field EML surgically replaced.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_int_rights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Intellectual Rights — set_int_rights","text":"","code":"set_int_rights(   eml_object,   license = c(\"CC0\", \"public\", \"restricted\"),   force = FALSE,   NPS = TRUE )"},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_int_rights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Intellectual Rights — set_int_rights","text":"eml_object R object imported (typically EML-formatted .xml file) using EML::read_eml(, =\"xml\"). license String. Indicates type license used. three potential options \"CC0\" (CC zero), \"public\" \"restricted\". CC0 public can used CUI set either PUBFUL PUBVER. Restricted can used CUI set code PUBFUL PUBVER (see set_cui() list codes). view exact text inserted license, please see https://nationalparkservice.github.io/NPS_EML_Script/stepbystep.html#intellectual-rights force logical. Defaults false. set FALSE, interactive version function requesting user input feedback. Setting force = TRUE facilitates scripting. NPS Logical. Defaults TRUE. users leave default. specific circumstances set FALSE: publishing NPS, need set publisher location place Fort Collins Office (e.g. working data package) product \"\" NPS \"\" NPS need specify different agency, set NPS = FALSE. NPS=TRUE, function -write existing publisher info inject NPS publisher along Central Office Fort Collins location. Additionally, sets \"NPS\" field TRUE specifies originating agency NPS.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_int_rights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Intellectual Rights — set_int_rights","text":"emlObject","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_int_rights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set Intellectual Rights — set_int_rights","text":"set_int_rights requires CUI information listed additionalMetadata prior called. verbose force = FALSE option warn user CUI specified. set_int_rights checks make sure CUI code specified (see set_cui()) appropriate license type chosen.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_int_rights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Intellectual Rights — set_int_rights","text":"","code":"if (FALSE) { set_int_rights(eml_object, \"CC0\", force=TRUE, NPS=FALSE) set_int_rights(eml_object, \"restricted\")}"},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_language.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the human language used for metadata — set_language","title":"Set the human language used for metadata — set_language","text":"set_language allows user specify language metadata (data) constructed . field intended hold human language, .e. English, Spanish, Cherokee.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_language.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the human language used for metadata — set_language","text":"","code":"set_language(eml_object, lang, force = FALSE, NPS = TRUE)"},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_language.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the human language used for metadata — set_language","text":"eml_object R object imported (typically EML-formatted .xml file) using EML::read_eml(, =\"xml\"). lang string consisting language data metadata constructed , example, \"English\", \"Spanish\", \"Navajo\". Capitalization matter, spelling ! input provided converted 3-digit ISO 639-2 codes. force logical. Defaults false. set FALSE, interactive version function requesting user input feedback. Setting force = TRUE facilitates scripting. NPS Logical. Defaults TRUE. users leave default. specific circumstances set FALSE: publishing NPS, need set publisher location place Fort Collins Office (e.g. working data package) product \"\" NPS \"\" NPS need specify different agency, set NPS = FALSE. NPS=TRUE, function -write existing publisher info inject NPS publisher along Central Office Fort Collins location. Additionally, sets \"NPS\" field TRUE specifies originating agency NPS.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_language.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the human language used for metadata — set_language","text":"eml_object","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_language.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the human language used for metadata — set_language","text":"English words language data metadata constructed (e.g. \"English\") automatically converted 3-letter codes languages listed ISO 639-2 (available https://www.loc.gov/standards/iso639-2/php/code_list.php) inserted metadata.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_language.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the human language used for metadata — set_language","text":"","code":"if (FALSE) { set_language(eml_object, \"english\") set_language(eml_object, \"Spanish\") set_language(eml_object, \"nAvAjO\") }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_lit.html","id":null,"dir":"Reference","previous_headings":"","what":"Edit literature cited — set_lit","title":"Edit literature cited — set_lit","text":"set_lit takes bibtex file (*.bib) input adds bibtex list EML citations","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_lit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edit literature cited — set_lit","text":"","code":"set_lit(eml_object, bibtex_file, force = FALSE, NPS = TRUE)"},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_lit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edit literature cited — set_lit","text":"eml_object R object imported (typically EML-formatted .xml file) using EML::read_eml(, =\"xml\"). bibtex_file text file one bib-formatted references extension .bib. Make sure .bib file working directory, supply path file. force logical. Defaults false. set FALSE, interactive version function requesting user input feedback. Setting force = TRUE facilitates scripting. NPS Logical. Defaults TRUE. users leave default. specific circumstances set FALSE: publishing NPS, need set publisher location place Fort Collins Office (e.g. working data package) product \"\" NPS \"\" NPS need specify different agency, set NPS = FALSE. NPS=TRUE, function -write existing publisher info inject NPS publisher along Central Office Fort Collins location. Additionally, sets \"NPS\" field TRUE specifies originating agency NPS.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_lit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Edit literature cited — set_lit","text":"EML object","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_lit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Edit literature cited — set_lit","text":"looks literature cited  tag finds none, inserts citations entry *.bib file. literature cited exists asks either nothing, replace existing literature cited supplied .bib file, append additional references supplied .bib file. force=TRUE, existing literature cited replaced contents .bib file.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_lit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Edit literature cited — set_lit","text":"","code":"if (FALSE) { eml_object <- litcited2 <- set_lit(eml_object, \"bibfile.bib\") }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_producing_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets Producing Units for use in DataStore — set_producing_units","title":"Sets Producing Units for use in DataStore — set_producing_units","text":"set_producing_units inserts unit code producing unit data/metadata EML metdata file.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_producing_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets Producing Units for use in DataStore — set_producing_units","text":"","code":"set_producing_units(eml_object, prod_units, force = FALSE, NPS = TRUE)"},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_producing_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets Producing Units for use in DataStore — set_producing_units","text":"eml_object R object imported (typically EML-formatted .xml file) using EML::read_eml(, =\"xml\"). prod_units string producing unit Unit Code list unit codes, example \"ROMO\" c(\"ROMN\", \"SODN\") force logical. Defaults false. set FALSE, interactive version function requesting user input feedback. Setting force = TRUE facilitates scripting. NPS Logical. Defaults TRUE. users leave default. specific circumstances set FALSE: publishing NPS, need set publisher location place Fort Collins Office (e.g. working data package) product \"\" NPS \"\" NPS need specify different agency, set NPS = FALSE. NPS=TRUE, function -write existing publisher info inject NPS publisher along Central Office Fort Collins location. Additionally, sets \"NPS\" field TRUE specifies originating agency NPS.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_producing_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets Producing Units for use in DataStore — set_producing_units","text":"EML object","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_producing_units.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sets Producing Units for use in DataStore — set_producing_units","text":"inserts unit code metadataProvider element. Currently add existing metadataProvider fields; just -write . also currently handles single producing unit. See @param NPS details sub-functions. Additionally, information version EML editor used injected metadata.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_producing_units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets Producing Units for use in DataStore — set_producing_units","text":"","code":"if (FALSE) { prod_units <- c(\"ABCD\", \"EFGH\") set_producing_units(eml_object, prod_units) set_producing_units(eml_object, c(\"ABCD\", \"EFGH\")) set_producing_units(eml_object, \"ABCD\", force = TRUE) }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_protocol.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a connection to the protocol under which the data were collected — set_protocol","title":"Adds a connection to the protocol under which the data were collected — set_protocol","text":"set_protocol adds metadata link protocol data described collected. automatically inserts link DataStore landing page protocol well ?????","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_protocol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a connection to the protocol under which the data were collected — set_protocol","text":"","code":"set_protocol(eml_object, protocol_id, force = FALSE, NPS = TRUE)"},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_protocol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a connection to the protocol under which the data were collected — set_protocol","text":"eml_object R object imported (typically EML-formatted .xml file) using EML::read_eml(, =\"xml\"). protocol_id string. 7-digit number identifying DataStore reference number Project describes inventory monitoring project. force logical. Defaults false. set FALSE, interactive version function requesting user input feedback. Setting force = TRUE facilitates scripting. NPS Logical. Defaults TRUE. users leave default. specific circumstances set FALSE: publishing NPS, need set publisher location place Fort Collins Office (e.g. working data package) product \"\" NPS \"\" NPS need specify different agency, set NPS = FALSE. NPS=TRUE, function -write existing publisher info inject NPS publisher along Central Office Fort Collins location. Additionally, sets \"NPS\" field TRUE specifies originating agency NPS.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_protocol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a connection to the protocol under which the data were collected — set_protocol","text":"emlObject","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_protocol.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds a connection to the protocol under which the data were collected — set_protocol","text":"set_protocol requires protocols projects organized specific fashion DataStore. Errors generated function stem either protocol published (publicly available) obsolete protocol/project organization within DataStore.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_protocol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a connection to the protocol under which the data were collected — set_protocol","text":"","code":"if (FALSE) { set_protocol(eml_object, 2222140) }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_publisher.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Publisher — set_publisher","title":"Set Publisher — set_publisher","text":"set_publisher used publisher National Park Service contact address publisher central office Fort Collins. data packages published Fort Collins office, regardless collected uploaded . working metadata data package, use function unless sure need (NPS users want use function). want publisher anything NPS Fort Collins Office, want originating agency something NPS, product NPS, use function. probably good idea run args(set_publisher) make sure arguments, especially defaults, properly specified.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_publisher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Publisher — set_publisher","text":"","code":"set_publisher(   eml_object,   org_name = \"NPS\",   street_address,   city,   state,   zip_code,   country,   URL,   email,   ror_id,   for_or_by_NPS = TRUE,   force = FALSE,   NPS = FALSE )"},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_publisher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Publisher — set_publisher","text":"eml_object R object imported (typically EML-formatted .xml file) using EML::read_eml(, =\"xml\"). org_name String. organization name publishing digital product. Defaults \"NPS\". street_address String. street address digital product published city String. city digital product published state String. two-letter code state digital product published. zip_code String. postal code publishers location. country String. country digital product published. URL String. URL publisher. email String. email publisher. ror_id String. ROR id publisher (see https://ror.org/ information). for_or_by_NPS Logical. Defaults TRUE. digital product NPS, set FALSE. force logical. Defaults false. set FALSE, interactive version function requesting user input feedback. Setting force = TRUE facilitates scripting. NPS Logical. Defaults TRUE. Set FALSE party responsible data collection generation NPS publisher NPS central office Fort Collins.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_publisher.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Publisher — set_publisher","text":"emlObject","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_publisher.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Publisher — set_publisher","text":"","code":"if (FALSE) { set_publisher(eml_object,   \"BroadLeaf\",   \"123 First Street\",   \"Second City\",   \"CO\",   \"12345\",   \"USA\",   \"https://www.organizationswebsite.com\",   \"contact@myorganization.com\",   \"https://ror.org/xxxxxxxxx\",   for_or_by_NPS = FALSE,   NPS = FALSE ) }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_title.html","id":null,"dir":"Reference","previous_headings":"","what":"Edit data package title — set_title","title":"Edit data package title — set_title","text":"Edit data package title","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_title.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edit data package title — set_title","text":"","code":"set_title(eml_object, data_package_title, force = FALSE, NPS = TRUE)"},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_title.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edit data package title — set_title","text":"eml_object R object imported (typically EML-formatted .xml file) using EML::read_eml(, =\"xml\"). data_package_title character string become new title data package. can specified directly function call can previously defined object holds character string. force logical. Defaults false. set FALSE, interactive version function requesting user input feedback. Setting force = TRUE facilitates scripting. NPS Logical. Defaults TRUE. users leave default. specific circumstances set FALSE: publishing NPS, need set publisher location place Fort Collins Office (e.g. working data package) product \"\" NPS \"\" NPS need specify different agency, set NPS = FALSE. NPS=TRUE, function -write existing publisher info inject NPS publisher along Central Office Fort Collins location. Additionally, sets \"NPS\" field TRUE specifies originating agency NPS.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_title.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Edit data package title — set_title","text":"EML-formatted R object","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_title.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Edit data package title — set_title","text":"set_title function checks see existing title asks user like change title. work still needed function get_eml() automatically returns instances given tag. Specifying title important function work well.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/set_title.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Edit data package title — set_title","text":"","code":"if (FALSE) { data_package_title <- \"New Title. Must match DataStore Reference title.\" eml_object <- set_title(eml_object, data_package_title) }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/upload_data_package.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload a data package to DataStore — upload_data_package","title":"Upload a data package to DataStore — upload_data_package","text":"upload_data_package() inspects data package , DOI supplied metadata, uploads data files metadata appropriate reference DataStore. function requires logged VPN. upload_data_package() work individual file data package less 32Mb. Larger files still require manual upload via DataStore web interface. upload_data_package() just uploads files. extract EML metadata populate reference fields DataStore activate reference - reference remains fully editable via web interface. using upload_data_package() need \"save\" reference DataStore; files automatically saved reference.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/upload_data_package.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload a data package to DataStore — upload_data_package","text":"","code":"upload_data_package(directory = here::here(), force = FALSE)"},{"path":"https://roblbaker.github.io/EMLeditor/reference/upload_data_package.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload a data package to DataStore — upload_data_package","text":"directory location (path) data package files force logical, defaults FALSE verbose interactive version. Set TRUE suppress interactions facilitate scripting.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/upload_data_package.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upload a data package to DataStore — upload_data_package","text":"invisible(NULL)","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/upload_data_package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Upload a data package to DataStore — upload_data_package","text":"Currently, .csv data files EML metadata files supported. .csvs must end \".csv\". single metadata file must end \"_metadata.xml\". includced DOI metadata, using upload_data_package() preferrable using web interface manually upload files insures files uploaded correct reference (.e. DOI metadata corresponds draft reference code DataStore). uploaded, advised look 'Files Links' tab DataStore web interface make sure files duplicates. can delete files necessary 'Files Links' tab reference activated. function primarily intended uploading files data package reference type DataStore, upload .csvs single EML metadata file saved *_metadata.xml file reference type, assuming metadata DOI listed expected location corresponding draft reference DataStore.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/upload_data_package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upload a data package to DataStore — upload_data_package","text":"","code":"if (FALSE) { dir <- here::here(\"..\", \"Downloads\", \"BICY\") upload_data_package(dir) }"},{"path":"https://roblbaker.github.io/EMLeditor/reference/write_readme.html","id":null,"dir":"Reference","previous_headings":"","what":"Writes a README file — write_readme","title":"Writes a README file — write_readme","text":"write_readme writes readme file based current metadata","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/write_readme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Writes a README file — write_readme","text":"","code":"write_readme(eml_object, outfile = \"\")"},{"path":"https://roblbaker.github.io/EMLeditor/reference/write_readme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Writes a README file — write_readme","text":"eml_object R object imported (typically EML-formatted .xml file) using EML::read_eml(, =\"xml\"). outfile name file want write, typically *.txt.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/write_readme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Writes a README file — write_readme","text":"character string readable format (saved given outfile)","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/write_readme.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Writes a README file — write_readme","text":"write_readme writes mock-readme file eventually automatically generated DataStore. file error checking purposes . something looks , can go back fix metadata correct upload readme file data package.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/reference/write_readme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Writes a README file — write_readme","text":"","code":"if (FALSE) { write_readme(eml_object, \"TestReadMe.txt\") }"},{"path":[]},{"path":"https://roblbaker.github.io/EMLeditor/news/index.html","id":"id_12-april-0-1-0-5","dir":"Changelog","previous_headings":"","what":"12 April 2023","title":"EMLeditor v0.1.0.5 “Work in Progress”","text":"set_doi() set_datastore_doi() now automatically update online urls listed metadata data file correspond new location. Caution: metadata DOI generated prior 12 April 2023 may incorrect online URLs.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/news/index.html","id":"id_04-april-0-1-0-5","dir":"Changelog","previous_headings":"","what":"04 April 2023","title":"EMLeditor v0.1.0.5 “Work in Progress”","text":"upload_data_package() maximum file size increased 32Mb (4Mb)","code":""},{"path":"https://roblbaker.github.io/EMLeditor/news/index.html","id":"id_24-march-0-1-0-5","dir":"Changelog","previous_headings":"","what":"24 March 2023","title":"EMLeditor v0.1.0.5 “Work in Progress”","text":"Added tryCatch .get_park_poygon() improve error handling invalid park codes. Improved set_content_units() error handling specifically test invalid park codes prior executing & report list invalid park codes user. Fixed (yet another) bug get_content_units().","code":""},{"path":[]},{"path":"https://roblbaker.github.io/EMLeditor/news/index.html","id":"id_21-march-0-1-0-4","dir":"Changelog","previous_headings":"","what":"21 March 2023","title":"EMLeditor v0.1.0.4 “Acadia”","text":"Summary Added new function upload_data_package() upload data package files appropriate draft reference DataStore. Individual files must < 4Mb.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/news/index.html","id":"major-changes-0-1-0-4","dir":"Changelog","previous_headings":"21 March 2023","what":"Major changes:","title":"EMLeditor v0.1.0.4 “Acadia”","text":"Added upload_data_package() upload data package files appropriate draft reference DataStore. function compatible .csv data files requires single EML metadata file ending *_metadata.xml present single folder/directory. metadata file must DOI specified. upload_data_package() extract DOI metadata check see corresponding reference exists DataStore. reference exists, function upload file data package (including metadata file).","code":""},{"path":"https://roblbaker.github.io/EMLeditor/news/index.html","id":"minor-changes-0-1-0-4","dir":"Changelog","previous_headings":"21 March 2023","what":"Minor changes","title":"EMLeditor v0.1.0.4 “Acadia”","text":"Minor update get_doi() points; DOI doesn’t exist function now refers users set_doi() set_datastore_doi(). Minor updates documentation consistency grammar.","code":""},{"path":[]},{"path":"https://roblbaker.github.io/EMLeditor/news/index.html","id":"february-0-1-0-3","dir":"Changelog","previous_headings":"","what":"February 24, 2023","title":"EMLeditor v0.1.0.3 “Hall of Mosses”","text":"Summary Added new function, set_datastore_doi() initiate draft reference DataStore insert DOI metadata","code":""},{"path":"https://roblbaker.github.io/EMLeditor/news/index.html","id":"major-changes-0-1-0-3","dir":"Changelog","previous_headings":"February 24, 2023","what":"Major changes:","title":"EMLeditor v0.1.0.3 “Hall of Mosses”","text":"Added new function, set_datasore_doi() initiate draft reference DataStore insert DOI metadata. requires user logged VPN metadata title data package. function warn user metadata already contains DOI ask really want generate new draft reference new DOI.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/news/index.html","id":"minor-changes-0-1-0-3","dir":"Changelog","previous_headings":"February 24, 2023","what":"Minor changes","title":"EMLeditor v0.1.0.3 “Hall of Mosses”","text":"Updated documentation reflect new set_datastore_doi() function. Updated get_title() get_doi() functions get just data package title just data package DOI, respectively. returning multiple titles dois   fields used multiple times metadata.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://roblbaker.github.io/EMLeditor/news/index.html","id":"summary-0-1-0-1","dir":"Changelog","previous_headings":"January 24, 2023","what":"Summary","title":"EMLeditor v0.1.0.1 “Whitebark Pine”","text":"Added check_eml() function.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/news/index.html","id":"major-changes-0-1-0-1","dir":"Changelog","previous_headings":"January 24, 2023","what":"Major changes","title":"EMLeditor v0.1.0.1 “Whitebark Pine”","text":"check_eml() function wrapper calls DPchecker::run_congruence_checks() check_metadata-= TRUE. run metadata-specific tests run congruence test.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/news/index.html","id":"minor-changes-0-1-0-1","dir":"Changelog","previous_headings":"January 24, 2023","what":"Minor changes","title":"EMLeditor v0.1.0.1 “Whitebark Pine”","text":"specify ISO 639-2B set_language() added documentation check_eml() Changed Non-NPS user section apt, “Custom Publisher/Producer” added “Additional Functions” section addition Minimal Workflow outlines functions like set_title(), set_abstract() set_int_rights(). moved write_readme() new check_eml() file check_eml.R.","code":""},{"path":[]},{"path":[]},{"path":"https://roblbaker.github.io/EMLeditor/news/index.html","id":"summary-0-1-0-0","dir":"Changelog","previous_headings":"December 1, 2022","what":"Summary","title":"EMLeditor v0.1.0.0, “Electric Peak”","text":"Added set_int_rights() function.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/news/index.html","id":"major-changes-0-1-0-0","dir":"Changelog","previous_headings":"December 1, 2022","what":"Major Changes","title":"EMLeditor v0.1.0.0, “Electric Peak”","text":"set_int_rights() allows users update intellectual rights text supplied 3rd party EML generators one 3 NPS-specific options. Enforces congruence CUI license.","code":""},{"path":[]},{"path":"https://roblbaker.github.io/EMLeditor/news/index.html","id":"summary-0-1-0-0-1","dir":"Changelog","previous_headings":"November, 2022","what":"Summary","title":"EMLeditor v0.1.0.0, “Electric Peak”","text":"Updating v0.1.0.0 “Electric Peak” recommended users order take full advantage metadata/DataStore integration included --date locations specifications DataStore metadata elements.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/news/index.html","id":"major-changes-0-1-0-0-1","dir":"Changelog","previous_headings":"November, 2022","what":"Major Changes","title":"EMLeditor v0.1.0.0, “Electric Peak”","text":"ability switch “set_” class functions verbose (asks user input, provides feedback) silent (feedback, prompts) enable scripting. Inclusion set_publisher function customize publisher agencyOriginated options non-NPS users, NPS partners contractors.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/news/index.html","id":"enhancements-0-1-0-0","dir":"Changelog","previous_headings":"November, 2022","what":"Enhancements","title":"EMLeditor v0.1.0.0, “Electric Peak”","text":"CUI can now overwritten well written write_readme dynamically populates publisher information Renamed functions parameters conform tidyverse style guides Removed redundant functions (set_doi) Added ability set DRR title DOI write_readme now defaults printing screen (can still save .txt file) Update documentation reflect changes","code":""},{"path":"https://roblbaker.github.io/EMLeditor/news/index.html","id":"bug-fixes-0-1-0-0","dir":"Changelog","previous_headings":"November, 2022","what":"Bug Fixes","title":"EMLeditor v0.1.0.0, “Electric Peak”","text":"Let’s just leave “lot”.","code":""},{"path":"https://roblbaker.github.io/EMLeditor/news/index.html","id":"emleditor-0011","dir":"Changelog","previous_headings":"","what":"EMLeditor 0.0.1.1","title":"EMLeditor 0.0.1.1","text":"Added NEWS.md file track changes package.","code":""}]
